{"version":3,"sources":["Homepage.js","Movie.js","App.js","serviceWorker.js","index.js"],"names":["Homepage","state","movies","Axios","url","method","params","api_key","process","then","res","setState","data","results","className","this","map","movie","key","id","to","original_title","src","poster_path","alt","Component","Movie","props","match","movie_id","moviedb_api_key","overview","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gUAgDeA,E,YAtCX,aAAe,IAAD,8BACV,+CACKC,MAAQ,CACTC,OAAQ,IAHF,E,iFAMO,IAAD,OAChBC,IAAM,CACFC,IAAK,iDACLC,OAAQ,MACRC,OAAQ,CACJC,QAdQC,sCAiBfC,MAAK,SAACC,GACH,EAAKC,SAAS,CACVT,OAAQQ,EAAIE,KAAKC,e,+BAKzB,OACI,6BAASC,UAAU,mBACdC,KAAKd,MAAMC,OAAOc,KAAI,SAACC,GACpB,OACI,yBAAKH,UAAU,QAAQI,IAAKD,EAAME,IAC9B,kBAAC,IAAD,CAAMC,GAAE,iBAAYH,EAAME,KACtB,4BAAKF,EAAMI,gBACX,yBAAKC,IAAG,0CAAqCL,EAAMM,aAAeC,IAAI,e,GA7B/EC,aC6BRC,E,YA/BX,aAAe,IAAD,8BACV,+CACKzB,MAAQ,CACTgB,MAAO,IAHD,E,iFAMO,IAAD,OAChBd,IAAM,CACFC,IAAI,sCAAD,OAAwCW,KAAKY,MAAMC,MAAMtB,OAAOuB,UACnExB,OAAQ,MACRC,OAAQ,CACJC,QAASuB,KAGhBrB,MAAK,SAACC,GACH,EAAKC,SAAU,CACXM,MAAOP,EAAIE,Y,+BAKnB,OACI,6BACI,yBAAKU,IAAG,0CAAqCP,KAAKd,MAAMgB,MAAMM,eAC9D,4BAAKR,KAAKd,MAAMgB,MAAMI,gBACtB,2BAAIN,KAAKd,MAAMgB,MAAMc,e,GA1BjBN,a,OCsBLO,E,iLAhBP,OACI,kBAAC,IAAD,KAEI,yBAAKlB,UAAU,OACX,4BAAQA,UAAU,cACd,wCAEJ,kBAAC,IAAD,CAAOmB,OAAK,EAACC,KAAK,IAAIC,UAAWnC,IACjC,kBAAC,IAAD,CAAOiC,OAAK,EAACC,KAAK,mBAAmBC,UAAWT,U,GAVlDD,aCEEW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASX,MACvB,2DCZNY,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrC,MAAK,SAAAsC,GACjCA,EAAaC,kB","file":"static/js/main.d1a32ae9.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Axios from 'axios';\nimport { Link } from 'react-router-dom';\n\n\n\n\nconst moviedb_api_key = process.env.REACT_APP_MOVIEDB_API_KEY;\n\nclass Homepage extends Component {\n    constructor() {\n        super();\n        this.state = {\n            movies: []\n        }\n    }\n    componentDidMount() {\n        Axios({\n            url: 'https://api.themoviedb.org/3/movie/now_playing',\n            method: 'GET',\n            params: {\n                api_key: moviedb_api_key\n            }\n        })\n        .then((res) => {\n            this.setState({\n                movies: res.data.results\n            });\n        });\n    }\n    render() {\n        return (\n            <section className=\"movie-container\">\n                {this.state.movies.map((movie) => {\n                    return (\n                        <div className=\"movie\" key={movie.id}>\n                            <Link to={`/movie/${movie.id}`}>\n                                <h3>{movie.original_title}</h3>\n                                <img src={`https://image.tmdb.org/t/p/w500/${movie.poster_path}`} alt=\"\"/>\n                            </Link>\n                        </div>\n                    )\n                })}\n            </section>\n        )\n    }\n}\n\nexport default Homepage;\n\n","import React, { Component } from 'react';\nimport Axios from 'axios';\nimport moviedb_api_key from './Homepage'\n\n// const moviedb_api_key = process.env.REACT_APP_MOVIEDB_API_KEY;\n\nclass Movie extends Component {\n    constructor() {\n        super();\n        this.state = {\n            movie: {}\n        }\n    }\n    componentDidMount() {\n        Axios({\n            url: `https://api.themoviedb.org/3/movie/${this.props.match.params.movie_id}`,\n            method: 'GET',\n            params: {\n                api_key: moviedb_api_key\n            }\n        })\n        .then((res) => {\n            this.setState ({\n                movie: res.data\n            })\n        })\n    }\n    render() {\n        return (\n            <div>\n                <img src={`https://image.tmdb.org/t/p/w500/${this.state.movie.poster_path}`}/>\n                <h1>{this.state.movie.original_title}</h1>\n                <p>{this.state.movie.overview}</p>\n            </div>\n        )\n    }\n}\n\nexport default Movie;","import React, { Component } from 'react';\nimport './App.css';\nimport Homepage from './Homepage';\nimport Movie from './Movie';\nimport { \n    BrowserRouter as Router,\n    Route\n} from 'react-router-dom';\n\n\nclass App extends Component {\n    render() {\n        return (\n            <Router>\n\n                <div className=\"App\">\n                    <header className=\"App-header\">\n                        <h1>Movies!</h1>\n                    </header> \n                    <Route exact path=\"/\" component={Homepage} />\n                    <Route exact path=\"/movie/:movie_id\" component={Movie} />\n                </div>\n            </Router>\n        );\n    }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}